@model List<CoreReport.Models.ReportModel>
@using Newtonsoft.Json

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container mt-5">
    <!-- Button to open the modal to create a new report -->
    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#reportModal" onclick="openCreateModal()">Add New Report</button>

    <!-- Table to display the reports -->
    <table class="table table-striped table-bordered table-sm">
        <thead class="table-dark">
            <tr>
                <th>Report Name</th>
                <th>SP Name</th>
              
                <th class="col-3">Parameters</th> <!-- Smaller column for parameters -->
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in Model)
            {
                <tr>
                    <td>@report.ReportName</td>
                    <td>@report.SP_Name</td>
                   
                    <td>
                        <!-- Render Parameters as a List -->
                        @if (!string.IsNullOrEmpty(report.Parameters))
                        {
                            @* Parse and display each parameter in a list format *@
                            var parameters = JsonConvert.DeserializeObject<List<dynamic>>(report.Parameters);
                            foreach (var param in parameters)
                            {
                                <p><strong>@param.Name</strong>: @param.Type</p>
                            }
                        }
                    </td>
                    <td>
                        <!-- Edit Button with safer data passing -->
                        <button class="btn btn-warning btn-sm"
                                onclick='openEditModal(@Html.Raw(JsonConvert.SerializeObject(report)))'>
                            Edit
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteReport(@report.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Modal for creating and editing reports -->
<div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <form id="reportForm">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title" id="reportModalLabel">Add / Edit Report</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <input type="hidden" id="Id" name="Id" />

                    <div class="mb-3">
                        <label for="ReportName" class="form-label">Report Name</label>
                        <input type="text" class="form-control" id="ReportName" name="ReportName" required />
                    </div>

                    <div class="mb-3">
                        <label for="SP_Name" class="form-label">SP Name</label>
                        <input type="text" class="form-control" id="SP_Name" name="SP_Name" required />
                    </div>

                    @* <div class="mb-3">
                        <label for="Flag" class="form-label">Flag</label>
                        <input type="text" class="form-control" id="Flag" name="Flag" />
                    </div> *@

                    <div class="mb-3">
                        <label class="form-label">Parameters</label>
                        <div id="parametersContainer"></div>
                        <button type="button" class="btn btn-sm btn-success mt-2" onclick="addParameter()">+ Add Parameter</button>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Report</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    var reportModal = new bootstrap.Modal(document.getElementById('reportModal'));

    // Dropdown options for SQL datatypes
    const sqlTypes = ["int", "varchar", "nvarchar", "bit", "datetime", "date", "float", "decimal"];

    // Add parameter input group
    function addParameter(param) {
        param = param || { Name: "", Type: "int", IsRequired: false };
        const container = document.getElementById('parametersContainer');
        const index = container.children.length;

        const div = document.createElement('div');
        div.classList.add('d-flex', 'mb-2', 'gap-2');
        div.innerHTML = `
            <input type="text" name="ParameterList[${index}].Name" placeholder="Name" value="${param.Name}" class="form-control" required />
            <select name="ParameterList[${index}].Type" class="form-select" required>
                ${sqlTypes.map(t => `<option value="${t}" ${t === param.Type ? "selected" : ""}>${t}</option>`).join('')}
            </select>
            <div class="form-check">
                <input type="checkbox" name="ParameterList[${index}].IsRequired" class="form-check-input" ${param.IsRequired ? "checked" : ""} />
                <label class="form-check-label">Required</label>
            </div>
            <button type="button" class="btn btn-danger btn-sm" onclick="this.parentElement.remove()">X</button>
        `;
        container.appendChild(div);
    }

    // Open modal for create
    function openCreateModal() {
        $('#reportForm')[0].reset();
        document.getElementById('parametersContainer').innerHTML = '';
        addParameter(); // Start with one empty parameter
        reportModal.show();
    }

    // Open modal for edit
    function openEditModal(report) {
        $('#reportForm')[0].reset();
        document.getElementById('Id').value = report.Id;
        document.getElementById('ReportName').value = report.ReportName;
        document.getElementById('SP_Name').value = report.SP_Name;
      

        const container = document.getElementById('parametersContainer');
        container.innerHTML = ''; // Clear existing parameters

        if (report.Parameters && report.Parameters.length) {
            const parameters = JSON.parse(report.Parameters); // Parse the JSON string into an array of parameters
            parameters.forEach((param, index) => {
                addParameter(param); // Add parameter to the form
            });
        } else {
            addParameter(); // If no parameters exist, add a default empty one
        }

        reportModal.show();
    }

    // Submit form with AJAX
    $('#reportForm').submit(function (e) {
        e.preventDefault();

        const formData = $(this).serializeArray();
        const data = {};
        formData.forEach(x => {
            if (x.name.includes('ParameterList')) {
                if (!data['ParameterList']) data['ParameterList'] = [];
                if (x.name.endsWith('.IsRequired')) {
                    const idx = x.name.match(/\d+/)[0];
                    if (!data['ParameterList'][idx]) data['ParameterList'][idx] = {};
                    data['ParameterList'][idx]['IsRequired'] = true;
                } else if (x.name.endsWith('.Name')) {
                    const idx = x.name.match(/\d+/)[0];
                    if (!data['ParameterList'][idx]) data['ParameterList'][idx] = {};
                    data['ParameterList'][idx]['Name'] = x.value;
                } else if (x.name.endsWith('.Type')) {
                    const idx = x.name.match(/\d+/)[0];
                    if (!data['ParameterList'][idx]) data['ParameterList'][idx] = {};
                    data['ParameterList'][idx]['Type'] = x.value;
                }
            } else {
                data[x.name] = x.value;
            }
        });

        if (data.ParameterList) {
            data.ParameterList = data.ParameterList.map(p => {
                return {
                    Name: p.Name || "",
                    Type: p.Type || "int",
                    IsRequired: p.IsRequired === true
                };
            });
        }

        data.Parameters = JSON.stringify(data.ParameterList || []);

        const payload = {
            Id: data.Id || 0,
            ReportName: data.ReportName,
            SP_Name: data.SP_Name,
            Parameters: data.Parameters
        };

        $.ajax({
            url: '@Url.Action("CreateOrEdit", "Reports")',
            type: 'POST',
            data: JSON.stringify(payload),
            contentType: 'application/json',
            success: function (response) {
                if (response.success) {
                    alert('Report saved successfully!');
                    location.reload(); // Reload page to refresh table
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function () {
                alert('Error saving report.');
            }
        });
    });

    // Delete report
    function deleteReport(id) {
        if (!confirm('Are you sure you want to delete this report?')) return;

        $.ajax({
            url: '@Url.Action("DeleteConfirmed", "Reports")',
            type: 'POST',
            data: { id: id },
            success: function (response) {
                if (response.success) {
                    alert('Deleted successfully!');
                    location.reload();
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function () {
                alert('Error deleting report.');
            }
        });
    }
</script>
